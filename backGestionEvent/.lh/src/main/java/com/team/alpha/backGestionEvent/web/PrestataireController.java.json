{
    "sourceFile": "src/main/java/com/team/alpha/backGestionEvent/web/PrestataireController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1699306135396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699306389584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,21 +5,32 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.core.annotation.AuthenticationPrincipal;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.web.bind.annotation.*;\n \n import com.team.alpha.backGestionEvent.model.Prestataire;\n+import com.team.alpha.backGestionEvent.model.Review;\n import com.team.alpha.backGestionEvent.model.User;\n+import com.team.alpha.backGestionEvent.repository.PrestataireRepository;\n+import com.team.alpha.backGestionEvent.repository.ReviwRepository;\n import com.team.alpha.backGestionEvent.service.PrestataireService;\n \n //Pour les controller\n @RestController\n @RequestMapping(\"/prestataires\")\n public class PrestataireController {\n+\n     @Autowired\n     private PrestataireService prestataireService;\n \n+    @Autowired\n+    private PrestataireRepository prestataireRepository;\n+\n+    @Autowired\n+    private ReviwRepository reviwRepository;\n+\n     @GetMapping\n     public Iterable<Prestataire> getAllClients() {\n         return prestataireService.getAllPrestataires();\n     }\n@@ -51,10 +62,44 @@\n     @GetMapping(\"/profile\")\n     public ResponseEntity<Prestataire> getPrestataireProfile(@AuthenticationPrincipal User user) {\n         /*\n          * Utilisez l'utilisateur actuellement connecté pour récupérer le profil du\n-         * client\n+         * prestataire\n          */\n         Optional<Prestataire> prestataire = prestataireService.getPrestataireById(user.getId());\n         return new ResponseEntity<>(prestataire.get(), HttpStatus.OK);\n     }\n+\n+    // *******************************************************************************************************************\n+    @PostMapping(\"/reviews\")\n+    public ResponseEntity<Review> createReview(@RequestBody Review review) {\n+        // Vérifie que l'utilisateur est connecté\n+        if (SecurityContextHolder.getContext().getAuthentication() == null) {\n+            return ResponseEntity.status(401).build();\n+        }\n+\n+        // Vérifie que l'utilisateur a utilisé le service du prestataire\n+        Prestataire prestataire = prestataireRepository.findByMail(review.getEmailPrestataire()).orElse(null);\n+\n+        if (prestataire == null) {\n+            return ResponseEntity.status(404).build();\n+        }\n+\n+        // Vérifie que la note est comprise entre 1 et 5\n+        if (review.getNote() < 1 || review.getNote() > 5) {\n+            return ResponseEntity.status(400).build();\n+        }\n+\n+        // Enregistre la critique\n+        review.setEmailClient(SecurityContextHolder.getContext().getAuthentication().getName());\n+\n+        reviwRepository.save(review);\n+\n+        // Met à jour la note du produit\n+        prestataire.setRating(prestataire.getNote() + review.getNote());\n+        prestataireRepository.save(prestataire);\n+\n+        return ResponseEntity.ok(review);\n+    }\n+    // *******************************************************************************************************************\n+\n }\n"
                }
            ],
            "date": 1699306135396,
            "name": "Commit-0",
            "content": "package com.team.alpha.backGestionEvent.web;\n\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.*;\n\nimport com.team.alpha.backGestionEvent.model.Prestataire;\nimport com.team.alpha.backGestionEvent.model.User;\nimport com.team.alpha.backGestionEvent.service.PrestataireService;\n\n//Pour les controller\n@RestController\n@RequestMapping(\"/prestataires\")\npublic class PrestataireController {\n    @Autowired\n    private PrestataireService prestataireService;\n\n    @GetMapping\n    public Iterable<Prestataire> getAllClients() {\n        return prestataireService.getAllPrestataires();\n    }\n\n    @GetMapping(\"/{id}\")\n    public Optional<Prestataire> getClientById(@PathVariable Long id) {\n        return prestataireService.getPrestataireById(id);\n    }\n\n    @PostMapping\n    public Prestataire createPrestataire(@RequestParam String nom, @RequestParam String prenom,\n            @RequestParam String mail,\n            @RequestParam String photo, @RequestParam String password) throws Exception {\n        return prestataireService.createPrestataire(nom, prenom, prenom, password,\n                mail, photo);\n\n    }\n\n    @PutMapping(\"/{id}\")\n    public Prestataire updatePrestataire(@PathVariable Long id, @RequestBody Prestataire updatePrestataire) {\n        return prestataireService.updatePrestataire(id, updatePrestataire);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public boolean deletePrestataire(@PathVariable Long id) {\n        return prestataireService.deletePrestataire(id);\n    }\n\n    @GetMapping(\"/profile\")\n    public ResponseEntity<Prestataire> getPrestataireProfile(@AuthenticationPrincipal User user) {\n        /*\n         * Utilisez l'utilisateur actuellement connecté pour récupérer le profil du\n         * client\n         */\n        Optional<Prestataire> prestataire = prestataireService.getPrestataireById(user.getId());\n        return new ResponseEntity<>(prestataire.get(), HttpStatus.OK);\n    }\n}\n"
        }
    ]
}